
可読性が良いもの、後で見てわかる

抽象化、一般化を目的、実施している
→使っているクラスが、自分だけではなく、一般的に抽象化した上で
 他で同じことを実装する人のために、使いやすく設計しクラスを準備したり、概念を考えること



クラス設計をする段階で、
イミュータブルな設計にする


設計段階
・システムより、目的を先に全体像を捉える
・ユーザがどうこのアプリに触れて、どういうふうに使っているかを想像する


画面
・このアプリの使い始めをどう考えているか
・画面遷移と人の動き
　ユースケース図、機能ごと
・使うことを考えて入力は少なめに
・誕生日いるのか


表現
・誕生日の表現(西暦)
・バリデーションの方法の表現：パスワード
・設計図内で、経緯(理由)があった方が良い
・チェックの説明がチェックの方法しか書いてないからわからない


見た目
・直感的に使えるか
・ボタンの表示名も見て何をする処理かわかるように


入力内容
・プライバシーの観点から、入力内容を精査する
　(個人が特定されるような入力や表示を避ける)


Program
・sessionのvaluesをarrayとしてそのまま渡すのではなく、
　対象の目的用としてkeyをセットする
　例) ‘temp.confirm’ => 処理するクラスのインスタンス
・session保存の処理をもっとシンプルに
　クラス化して、requestインスタンスを渡して処理する


有効化されているユーザかどうかを関数でチェック
・booleanでチェックする内容に変更
・is_nullなどをあまりif分で判定に使用せず。。

ボタンの処理分け
・別関数で